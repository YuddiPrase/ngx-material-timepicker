{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-unit.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-period.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-format.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker-event.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/dom.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/utils/timepicker.utils.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/time-adapter.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/ngx-material-timepicker-container/ngx-material-timepicker-container.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/tokens/time-locale.token.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-toggle-icon.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-toggle-button/ngx-material-timepicker-toggle.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-timepicker.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-theme.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/utils/timepicker-time.utils.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-hours-face/ngx-material-timepicker-hours-face.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-face/ngx-material-timepicker-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-button/ngx-material-timepicker-button.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial/ngx-material-timepicker-dial.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-parser.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial-control/ngx-material-timepicker-dial-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-period/ngx-material-timepicker-period.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/overlay.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/minutes-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/autofocus.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/ngx-timepicker-field.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/timepicker-time-control/ngx-timepicker-time-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/timepicker-period-selector/ngx-timepicker-period-selector.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-localizer.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/active-hour.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/active-minute.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/ngx-material-timepicker-content/ngx-material-timepicker-content.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/append-to-input.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","TimeUnit","TimePeriod","TimeFormat","NgxMaterialTimepickerEventService","backdropClickSubject","Subject","keydownEventSubject","asObservable","pipe","shareReplay","bufferSize","refCount","dispatchEvent","event","type","next","Error","Injectable","providedIn","DomService","cfr","appRef","injector","document","appendTimepickerToBody","timepicker","config","_this","componentRef","resolveComponentFactory","keys","forEach","instance","attachView","hostView","domElement","rootNodes","body","appendChild","destroyTimepicker","destroy","detachView","tslib_1.__param","Optional","Inject","DOCUMENT","ComponentFactoryResolver","ApplicationRef","Injector","isSameOrAfter","time","compareWith","unit","hour","hasSame","valueOf","isSameOrBefore","isDigit","e","some","keyCode","ctrlKey","metaKey","TimeAdapter","parseTime","opts","_a","getLocaleOptionsByTime","numberingSystem","locale","timeMask","split","TWELVE_SHORT","TWENTY_FOUR_SHORT","DateTime","fromFormat","formatTime","format","parsedTime","setLocale","DEFAULT_LOCALE","toLocaleString","TIME_SIMPLE","hour12","DEFAULT_NUMBERING_SYSTEM","replace","toISOTime","includeOffset","suppressMilliseconds","suppressSeconds","toLocaleTimeString","DEFAULT_FORMAT","_b","timeFormat","isTimeAvailable","min","max","granularity","minutesGap","convertedTime","minutes","minute","isAfter","isBefore","between","before","after","isBetween","formatHour","currentHour","period","AM","PM","fromDateTimeToString","TWENTY_FOUR","TWELVE","reconfigure","toFormat","luxon","local","resolvedLocaleOpts","localeConfig","defaultConfig","isNaN","parseInt","DEFAULT_HOUR","angle","DEFAULT_MINUTE","NgxMaterialTimepickerService","hourSubject","BehaviorSubject","minuteSubject","periodSubject","setDefaultTimeIfAvailable","setDefaultTime","console","error","getFullTime","getValue","trim","defaultTime","toJSDate","fromJSDate","isValid","substr","toUpperCase","getHours","formatHourByPeriod","getMinutes","resetTime","AnimationState","TIME_LOCALE","InjectionToken","NgxMaterialTimepickerContainerComponent","timepickerService","eventService","timeUnit","activeTimeUnit","HOUR","unsubscribe","onKeydown","stopPropagation","ngOnInit","animationState","disableAnimation","ENTER","defineTime","selectedHour","selectedMinute","selectedPeriod","timepickerBaseRef","timeUpdated","takeUntil","subscribe","bind","onHourChange","onTimeChange","onHourSelected","hoursOnly","changeTimeUnit","MINUTE","hourSelected","onMinuteChange","changePeriod","setTime","timeSet","close","LEAVE","animationDone","phaseName","toState","ngOnDestroy","complete","minTime","maxTime","timeChanged","emit","tslib_1.__decorate","Input","HostListener","Component","selector","template","animations","trigger","transition","style","transform","animate","opacity","providers","String","NgxMaterialTimepickerComponent","domService","isEsc","EventEmitter","opened","closed","theme","warn","_ngxMaterialTimepickerTheme","timepickerInput","_format","value","_minutesGap","gap","Math","floor","disabled","element","registerInput","input","open","cancelBtnTmpl","confirmBtnTmpl","editableHintTmpl","enableKeyboardInput","preventOverlayClick","appendToInput","timepickerClass","inputElement","subscribeToEvents","unsubscribeFromEvents","updateTime","merge","backdropClick","keydownEvent","filter","TemplateRef","Output","NgxMaterialTimepickerToggleIconDirective","Directive","NgxMaterialTimepickerToggleComponent","_disabled","undefined","ContentChild","static","VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","TimepickerDirective","multi","elementRef","_value","timepickerSubscriptions","onTouched","onChange","previousFormat","_timepicker","_min","_max","picker","registerTimepicker","updateInputValue","nativeElement","updateValue","ngOnChanges","changes","currentValue","onClick","disableClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","push","host","[disabled]","(change)","(blur)","ElementRef","NgxMaterialTimepickerThemeDirective","ngAfterViewInit","setTheme","val","prop","setProperty","toLowerCase","fill","map","v","disableHours","hours","currentTime","fromObject","disableMinutes","hour_1","NgxMaterialTimepickerHoursFace","hourChange","hoursList","onTimeSelected","NgxMaterialTimepicker24HoursFaceComponent","_super","tslib_1.__extends","ngAfterContentInit","changeDetection","ChangeDetectionStrategy","OnPush","NgxMaterialTimepicker12HoursFaceComponent","NgxMaterialTimepickerMinutesFaceComponent","minutesList","minuteChange","CLOCK_HAND_STYLES","height","top","NgxMaterialTimepickerFaceComponent","innerClockFaceSize","timeChange","timeSelected","setClockHandPosition","addTouchEvents","faceTimeChanges","selectedTimeChanges","selectedTime","faceTime","find","setTimeout","selectAvailableTime","trackByTime","_","onMousedown","preventDefault","isStarted","selectTime","MouseEvent","x0","y0","x","y","currentAngle","clockFaceCords","clockFace","getBoundingClientRect","centerX","left","width","centerY","arctangent","atan","abs","clientX","clientY","PI","circleAngle","isInnerClockChosen","isInnerClockFace","step","round","roundAngle","onMouseup","removeTouchEvents","touchStartHandler","touchEndHandler","addEventListener","removeEventListener","decreaseClockHand","increaseClockHand","clockHand","isClockFaceDisabled","every","availableTime","sqrt","pow","ViewChild","NgxMaterialTimepickerButtonComponent","NgxMaterialTimepickerDialComponent","meridiems","Info","periodChanged","timeUnitChanged","hourChanged","minuteChanged","changeHour","changeMinute","showHint","isHintVisible","hideHint","TimeParserPipe","timeMeasure","Pipe","name","NgxMaterialTimepickerDialControlComponent","timeParserPipe","focused","unfocused","timeList","saveTimeAndChangeTimeUnit","previousTime","changeTimeByKeyboard","char","fromCharCode","nextTime","test","isTimeUnavailable","isTimeDisabledToChange","changeTimeByArrow","onModelChange","toString","NgxMaterialTimepickerPeriodComponent","timePeriod","isPeriodAvailable","isSwitchPeriodAvailable","getDisabledTimeByPeriod","sequence","TimeFormatterPipe","OverlayDirective","preventClick","MinutesFormatterPipe","AutofocusDirective","activeElement","isFocusActive","focus","preventScroll","NgxTimepickerFieldComponent","minHour","maxHour","buttonAlign","unsubscribe$","timepickerTime","_defaultTime","isDefaultTime","period$","hour$","minute$","h","changeTime","m","onTimeSet","emitLocalTimeChange","localTime","NgxTimepickerFieldComponent_1","NgxTimepickerTimeControlComponent","timeParser","timeChanges","isFirstChange","isDefaultTimeSet","concatTime","changeTimeIfValid","increase","decrease","onFocus","isFocused","onBlur","timeString","NgxTimepickerPeriodSelectorComponent","periodSelected","periods","localizedPeriod","indexOf","isOpened","select","TimeLocalizerPipe","isKeyboardEnabled","ActiveHourPipe","ActiveMinutePipe","currentMinute","NgxMaterialTimepickerContentComponent","AppendToInputDirective","renderer","offsetHeight","_inputCords","bottom","isElementFit","window","innerHeight","inputCords","_direction","direction","append","changePosition","defineElementYByDirection","setStyle","inputTop","inputBottom","Renderer2","NgxMaterialTimepickerModule","ngModule","NgxMaterialTimepickerModule_1","useValue","NgModule","imports","CommonModule","FormsModule","exports","declarations","ɵ0","entryComponents"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum TimeUnit {\n    HOUR,\n    MINUTE\n}\n","export enum TimePeriod {\n    AM = 'AM',\n    PM = 'PM'\n}\n","export enum TimeFormat {\n    TWELVE = 'hh:mm a',\n    TWELVE_SHORT = 'h:m a',\n    TWENTY_FOUR = 'HH:mm',\n    TWENTY_FOUR_SHORT = 'H:m'\n}\n","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NgxMaterialTimepickerEventService {\n\n    private backdropClickSubject: Subject<MouseEvent> = new Subject();\n    private keydownEventSubject: Subject<KeyboardEvent> = new Subject();\n\n    get backdropClick(): Observable<MouseEvent> {\n        return this.backdropClickSubject.asObservable().pipe(shareReplay({bufferSize: 1, refCount: true}));\n    }\n\n    get keydownEvent(): Observable<KeyboardEvent> {\n        return this.keydownEventSubject.asObservable().pipe(shareReplay({bufferSize: 1, refCount: true}));\n    }\n\n    dispatchEvent(event: KeyboardEvent | MouseEvent): void {\n        switch (event.type) {\n            case 'click':\n                this.backdropClickSubject.next(<MouseEvent>event);\n                break;\n            case 'keydown':\n                this.keydownEventSubject.next(<KeyboardEvent>event);\n                break;\n            default:\n                throw new Error('no such event type');\n        }\n    }\n\n}\n","import {\n    ApplicationRef,\n    ComponentFactoryResolver,\n    ComponentRef,\n    EmbeddedViewRef,\n    Inject,\n    Injectable,\n    Injector,\n    Optional,\n    Type\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    NgxMaterialTimepickerContainerComponent\n} from '../components/ngx-material-timepicker-container/ngx-material-timepicker-container.component';\nimport { TimepickerConfig } from '../models/timepicker-config.interface';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DomService {\n\n    private componentRef: ComponentRef<NgxMaterialTimepickerContainerComponent>;\n\n    constructor(private cfr: ComponentFactoryResolver,\n                private appRef: ApplicationRef,\n                private injector: Injector,\n                @Optional() @Inject(DOCUMENT) private document: any) {\n    }\n\n    appendTimepickerToBody(timepicker: Type<NgxMaterialTimepickerContainerComponent>, config: TimepickerConfig): void {\n        this.componentRef = this.cfr.resolveComponentFactory(timepicker).create(this.injector);\n\n        Object.keys(config).forEach(key => this.componentRef.instance[key] = config[key]);\n\n        this.appRef.attachView(this.componentRef.hostView);\n\n        const domElement: HTMLElement = (this.componentRef.hostView as EmbeddedViewRef<NgxMaterialTimepickerContainerComponent>)\n            .rootNodes[0];\n\n        this.document.body.appendChild(domElement);\n    }\n\n    destroyTimepicker(): void {\n        this.componentRef.destroy();\n        this.appRef.detachView(this.componentRef.hostView);\n    }\n}\n","/* tslint:disable */\nimport { DateTime } from 'luxon';\n\n\nexport function isSameOrAfter(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n    if (unit === 'hours') {\n        return time.hour >= compareWith.hour;\n    }\n    if (unit === 'minutes') {\n        return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();\n    }\n}\n\nexport function isSameOrBefore(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n    if (unit === 'hours') {\n        return time.hour <= compareWith.hour;\n    }\n    if (unit === 'minutes') {\n        return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();\n    }\n}\n\nexport function isBetween(time: DateTime, before: DateTime, after: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n    if (unit === 'hours') {\n        return isSameOrBefore(time, after, unit) && isSameOrAfter(time, before, unit);\n    }\n    if (unit === 'minutes') {\n        return isSameOrBefore(time, after) && isSameOrAfter(time, before);\n    }\n}\n\nexport function isDigit(e: KeyboardEvent) {\n    // Allow: backspace, delete, tab, escape, enter\n    if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\n        // Allow: Ctrl/cmd+A\n        (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: Ctrl/cmd+C\n        (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: Ctrl/cmd+X\n        (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: home, end, left, right, up, down\n        (e.keyCode >= 35 && e.keyCode <= 40)) {\n\n        return true;\n    }\n    return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\n}\n","import {DateTime, DateTimeFormatOptions, LocaleOptions, NumberingSystem} from 'luxon';\n\nimport {TimeFormat} from '../models/time-format.enum';\nimport {TimePeriod} from '../models/time-period.enum';\nimport {isBetween, isSameOrAfter, isSameOrBefore} from '../utils/timepicker.utils';\nimport {TimeOptions} from '../models/time-options.interface';\n\n// @dynamic\nexport class TimeAdapter {\n    static DEFAULT_FORMAT = 12;\n    static DEFAULT_LOCALE = 'en-US';\n    static DEFAULT_NUMBERING_SYSTEM: NumberingSystem = 'latn';\n\n    static parseTime(time: string, opts: TimeOptions): DateTime {\n        const {numberingSystem, locale} = TimeAdapter.getLocaleOptionsByTime(time, opts);\n        const isPeriodExist = time.split(' ').length === 2;\n        const timeMask = isPeriodExist ? TimeFormat.TWELVE_SHORT : TimeFormat.TWENTY_FOUR_SHORT;\n\n        return DateTime.fromFormat(time, timeMask, {numberingSystem, locale});\n    }\n\n    static formatTime(time: string, opts: TimeOptions): string {\n        const {format} = opts;\n        const parsedTime = TimeAdapter.parseTime(time, opts).setLocale(TimeAdapter.DEFAULT_LOCALE);\n\n        if (format !== 24) {\n            return parsedTime.toLocaleString({\n                ...DateTime.TIME_SIMPLE,\n                hour12: format !== 24,\n                numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM\n            }).replace(/\\u200E/g, '');\n        }\n        return parsedTime.toISOTime({\n            includeOffset: false,\n            suppressMilliseconds: true,\n            suppressSeconds: true\n        }).replace(/\\u200E/g, '');\n    }\n\n    static toLocaleTimeString(time: string, opts: TimeOptions = {}): string {\n        const {format = TimeAdapter.DEFAULT_FORMAT, locale = TimeAdapter.DEFAULT_LOCALE} = opts;\n        const timeFormat: DateTimeFormatOptions = {...DateTime.TIME_SIMPLE, hour12: format !== 24};\n        const timeMask = (format === 24) ? TimeFormat.TWENTY_FOUR_SHORT : TimeFormat.TWELVE_SHORT;\n\n        return DateTime.fromFormat(time, timeMask).setLocale(locale).toLocaleString(timeFormat);\n    }\n\n    static isTimeAvailable(\n        time: string,\n        min?: DateTime,\n        max?: DateTime,\n        granularity?: 'hours' | 'minutes',\n        minutesGap?: number,\n        format?: number\n    ): boolean {\n        if (!time) {\n            return;\n        }\n\n        const convertedTime = this.parseTime(time, {format});\n        const minutes = convertedTime.minute;\n\n        if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {\n            throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\n        }\n        const isAfter = (min && !max)\n            && isSameOrAfter(convertedTime, min, granularity);\n        const isBefore = (max && !min)\n            && isSameOrBefore(convertedTime, max, granularity);\n        const between = (min && max)\n            && isBetween(convertedTime, min, max, granularity);\n        const isAvailable = !min && !max;\n\n        return isAfter || isBefore || between || isAvailable;\n    }\n\n    /***\n     *  Format hour according to time format (12 or 24)\n     */\n    static formatHour(currentHour: number, format: number, period: TimePeriod): number {\n        if (format === 24) {\n            return currentHour;\n        }\n        const hour = period === TimePeriod.AM ? currentHour : currentHour + 12;\n\n        if (period === TimePeriod.AM && hour === 12) {\n            return 0;\n        } else if (period === TimePeriod.PM && hour === 24) {\n            return 12;\n        }\n        return hour;\n    }\n\n    static fromDateTimeToString(time: DateTime, format: number): string {\n        const timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\n\n        return time.reconfigure({\n            numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM,\n            locale: TimeAdapter.DEFAULT_LOCALE\n        }).toFormat(timeFormat);\n    }\n\n    private static getLocaleOptionsByTime(time: string, opts: TimeOptions): LocaleOptions {\n        const {numberingSystem, locale} = DateTime.local().setLocale(opts.locale).resolvedLocaleOpts();\n        const localeConfig: LocaleOptions = {numberingSystem: numberingSystem as NumberingSystem, locale};\n        const defaultConfig: LocaleOptions = {numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM, locale: TimeAdapter.DEFAULT_LOCALE};\n\n        return isNaN(parseInt(time, 10)) ? localeConfig : defaultConfig;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { ClockFaceTime } from '../models/clock-face-time.interface';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { TimePeriod } from '../models/time-period.enum';\nimport { TimeAdapter } from './time-adapter';\nimport { DateTime } from 'luxon';\n\n\nconst DEFAULT_HOUR: ClockFaceTime = {\n    time: 12,\n    angle: 360\n};\nconst DEFAULT_MINUTE: ClockFaceTime = {\n    time: 0,\n    angle: 360\n};\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NgxMaterialTimepickerService {\n\n    private hourSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_HOUR);\n    private minuteSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_MINUTE);\n    private periodSubject = new BehaviorSubject<TimePeriod>(TimePeriod.AM);\n\n\n    set hour(hour: ClockFaceTime) {\n        this.hourSubject.next(hour);\n    }\n\n    get selectedHour(): Observable<ClockFaceTime> {\n        return this.hourSubject.asObservable();\n    }\n\n    set minute(minute: ClockFaceTime) {\n        this.minuteSubject.next(minute);\n    }\n\n    get selectedMinute(): Observable<ClockFaceTime> {\n        return this.minuteSubject.asObservable();\n    }\n\n    set period(period: TimePeriod) {\n        const isPeriodValid = (period === TimePeriod.AM) || (period === TimePeriod.PM);\n\n        if (isPeriodValid) {\n            this.periodSubject.next(period);\n        }\n    }\n\n    get selectedPeriod(): Observable<TimePeriod> {\n        return this.periodSubject.asObservable();\n    }\n\n\n    setDefaultTimeIfAvailable(time: string, min: DateTime, max: DateTime, format: number, minutesGap?: number) {\n        /* Workaround to double error message*/\n        try {\n            if (TimeAdapter.isTimeAvailable(time, min, max, 'minutes', minutesGap)) {\n                this.setDefaultTime(time, format);\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    getFullTime(format: number): string {\n        const hour = this.hourSubject.getValue().time;\n        const minute = this.minuteSubject.getValue().time;\n        const period = format === 12 ? this.periodSubject.getValue() : '';\n        const time = `${hour}:${minute} ${period}`.trim();\n\n        return TimeAdapter.formatTime(time, {format});\n    }\n\n    private setDefaultTime(time: string, format: number) {\n        const defaultTime = TimeAdapter.parseTime(time, {format}).toJSDate();\n\n        if (DateTime.fromJSDate(defaultTime).isValid) {\n            const period = time.substr(time.length - 2).toUpperCase();\n            const hour = defaultTime.getHours();\n\n            this.hour = {...DEFAULT_HOUR, time: formatHourByPeriod(hour, period as TimePeriod)};\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes()};\n            this.period = period as TimePeriod;\n\n        } else {\n            this.resetTime();\n        }\n    }\n\n    private resetTime(): void {\n        this.hour = {...DEFAULT_HOUR};\n        this.minute = {...DEFAULT_MINUTE};\n        this.period = TimePeriod.AM;\n    }\n}\n\n/***\n *  Format hour in 24hours format to meridian (AM or PM) format\n */\nfunction formatHourByPeriod(hour: number, period: TimePeriod): number {\n    switch (period) {\n        case TimePeriod.AM:\n            return hour === 0 ? 12 : hour;\n        case TimePeriod.PM:\n            return hour === 12 ? 12 : hour - 12;\n        default:\n            return hour;\n    }\n}\n","import { Component, HostListener, Inject, Input, OnDestroy, OnInit, TemplateRef } from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { DateTime } from 'luxon';\nimport { animate, AnimationEvent, style, transition, trigger } from '@angular/animations';\nimport { NgxMaterialTimepickerService } from '../../services/ngx-material-timepicker.service';\nimport { Observable, Subject } from 'rxjs';\nimport { shareReplay, takeUntil } from 'rxjs/operators';\nimport { TimeAdapter } from '../../services/time-adapter';\nimport { TimepickerRef } from '../../models/timepicker-ref.interface';\nimport { TimepickerConfig } from '../../models/timepicker-config.interface';\nimport { NgxMaterialTimepickerEventService } from '../../services/ngx-material-timepicker-event.service';\nimport { NgxMaterialTimepickerTheme } from '../../models/ngx-material-timepicker-theme.interface';\nimport { TIME_LOCALE } from '../../tokens/time-locale.token';\n\nexport enum AnimationState {\n    ENTER = 'enter',\n    LEAVE = 'leave'\n}\n\n@Component({\n    selector: 'ngx-material-timepicker-container',\n    templateUrl: './ngx-material-timepicker-container.component.html',\n    styleUrls: ['./ngx-material-timepicker-container.component.scss'],\n    animations: [\n        trigger('timepicker', [\n            transition(`* => ${AnimationState.ENTER}`, [\n                style({transform: 'translateY(-30%)'}),\n                animate('0.2s ease-out', style({transform: 'translateY(0)'}))\n            ]),\n            transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [\n                style({transform: 'translateY(0)', opacity: 1}),\n                animate('0.2s ease-out', style({transform: 'translateY(-30%)', opacity: 0}))\n            ])\n        ])\n    ],\n    providers: [NgxMaterialTimepickerService]\n})\nexport class NgxMaterialTimepickerContainerComponent implements OnInit, OnDestroy, TimepickerConfig {\n\n    selectedHour: Observable<ClockFaceTime>;\n    selectedMinute: Observable<ClockFaceTime>;\n    selectedPeriod: Observable<TimePeriod>;\n\n    timeUnit = TimeUnit;\n    activeTimeUnit = TimeUnit.HOUR;\n\n    animationState: AnimationState;\n\n    cancelBtnTmpl: TemplateRef<Node>;\n    editableHintTmpl: TemplateRef<Node>;\n    confirmBtnTmpl: TemplateRef<Node>;\n    inputElement: any;\n\n    enableKeyboardInput: boolean;\n    preventOverlayClick: boolean;\n    disableAnimation: boolean;\n    disabled: boolean;\n    appendToInput: boolean;\n    hoursOnly: boolean;\n\n    format: number;\n    minutesGap: number;\n\n    minTime: DateTime;\n    maxTime: DateTime;\n    time: string;\n\n    timepickerClass: string;\n    theme: NgxMaterialTimepickerTheme;\n    timepickerBaseRef: TimepickerRef;\n\n    @Input()\n    set defaultTime(time: string) {\n        this.setDefaultTime(time);\n    }\n\n    private unsubscribe = new Subject();\n\n    constructor(private timepickerService: NgxMaterialTimepickerService,\n                private eventService: NgxMaterialTimepickerEventService,\n                @Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeydown(e: any): void {\n        this.eventService.dispatchEvent(e);\n        e.stopPropagation();\n    }\n\n    ngOnInit(): void {\n\n        this.animationState = !this.disableAnimation && AnimationState.ENTER;\n\n        this.defineTime();\n\n        this.selectedHour = this.timepickerService.selectedHour\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n\n        this.selectedMinute = this.timepickerService.selectedMinute\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n\n        this.selectedPeriod = this.timepickerService.selectedPeriod\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n\n        this.timepickerBaseRef.timeUpdated.pipe(takeUntil(this.unsubscribe))\n            .subscribe(this.setDefaultTime.bind(this));\n    }\n\n    onHourChange(hour: ClockFaceTime): void {\n        this.timepickerService.hour = hour;\n        this.onTimeChange();\n    }\n\n    onHourSelected(hour: number): void {\n        if (!this.hoursOnly) {\n            this.changeTimeUnit(TimeUnit.MINUTE);\n        }\n        this.timepickerBaseRef.hourSelected.next(hour);\n    }\n\n    onMinuteChange(minute: ClockFaceTime): void {\n        this.timepickerService.minute = minute;\n        this.onTimeChange();\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.timepickerService.period = period;\n        this.onTimeChange();\n    }\n\n    changeTimeUnit(unit: TimeUnit): void {\n        this.activeTimeUnit = unit;\n    }\n\n    setTime(): void {\n        this.timepickerBaseRef.timeSet.next(this.timepickerService.getFullTime(this.format));\n        this.close();\n    }\n\n    close(): void {\n        if (this.disableAnimation) {\n            this.timepickerBaseRef.close();\n            return;\n        }\n\n        this.animationState = AnimationState.LEAVE;\n    }\n\n    animationDone(event: AnimationEvent): void {\n        if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {\n            this.timepickerBaseRef.close();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.unsubscribe.next();\n        this.unsubscribe.complete();\n    }\n\n    private setDefaultTime(time: string): void {\n        this.timepickerService.setDefaultTimeIfAvailable(\n            time, this.minTime, this.maxTime, this.format, this.minutesGap);\n    }\n\n    private defineTime(): void {\n        const minTime = this.minTime;\n\n        if (minTime && !this.time) {\n            const time = TimeAdapter.fromDateTimeToString(minTime, this.format);\n\n            this.setDefaultTime(time);\n        }\n    }\n\n    private onTimeChange(): void {\n        const time = TimeAdapter.toLocaleTimeString(this.timepickerService.getFullTime(this.format), {\n            locale: this.locale,\n            format: this.format\n        });\n\n        this.timepickerBaseRef.timeChanged.emit(time);\n    }\n\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const TIME_LOCALE = new InjectionToken<string>('TimeLocale');\n","import { Component, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\nimport { merge, Subject } from 'rxjs';\nimport { NgxMaterialTimepickerEventService } from './services/ngx-material-timepicker-event.service';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\nimport { DateTime } from 'luxon';\nimport { DomService } from './services/dom.service';\nimport {\n    NgxMaterialTimepickerContainerComponent\n} from './components/ngx-material-timepicker-container/ngx-material-timepicker-container.component';\nimport { TimepickerRef } from './models/timepicker-ref.interface';\nimport { NgxMaterialTimepickerTheme } from './models/ngx-material-timepicker-theme.interface';\n\nconst ESCAPE = 27;\n\n@Component({\n    selector: 'ngx-material-timepicker',\n    template: '',\n})\nexport class NgxMaterialTimepickerComponent implements TimepickerRef {\n\n    timeUpdated = new Subject<string>();\n\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\n    @Input('ESC') isEsc = true;\n    @Input() enableKeyboardInput: boolean;\n    @Input() preventOverlayClick: boolean;\n    @Input() disableAnimation: boolean;\n    @Input() appendToInput: boolean;\n    @Input() hoursOnly = false;\n    @Input() defaultTime: string;\n    @Input() timepickerClass: string;\n    @Input() theme: NgxMaterialTimepickerTheme;\n    /**\n     * @deprecated Since version 5.1.1. Will be deleted on version 6.0.0. Use @Input() theme instead\n     */\n    @Input()\n    set ngxMaterialTimepickerTheme(theme: NgxMaterialTimepickerTheme) {\n        console.warn(`'ngxMaterialTimepickerTheme' is deprecated. Use 'theme' instead`);\n        this._ngxMaterialTimepickerTheme = theme;\n    }\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n    }\n\n    get format(): number {\n        return this.timepickerInput ? this.timepickerInput.format : this._format;\n    }\n\n    @Input()\n    set minutesGap(gap: number) {\n        if (gap == null) {\n            return;\n        }\n        gap = Math.floor(gap);\n        this._minutesGap = gap <= 59 ? gap : 1;\n    }\n\n    get minutesGap(): number {\n        return this._minutesGap;\n    }\n\n    @Output() timeSet = new EventEmitter<string>();\n    @Output() opened = new EventEmitter<null>();\n    @Output() closed = new EventEmitter<null>();\n    @Output() hourSelected = new EventEmitter<number>();\n    @Output() timeChanged = new EventEmitter<string>();\n\n    private _minutesGap: number;\n    private _format: number;\n    private _ngxMaterialTimepickerTheme: NgxMaterialTimepickerTheme;\n    private timepickerInput: TimepickerDirective;\n    private unsubscribe = new Subject();\n\n    constructor(private eventService: NgxMaterialTimepickerEventService,\n                private domService: DomService) {\n    }\n\n    get minTime(): DateTime {\n        return this.timepickerInput && (this.timepickerInput.min as DateTime);\n    }\n\n    get maxTime(): DateTime {\n        return this.timepickerInput && (this.timepickerInput.max as DateTime);\n    }\n\n    get disabled(): boolean {\n        return this.timepickerInput && this.timepickerInput.disabled;\n    }\n\n    get time(): string {\n        return this.timepickerInput && this.timepickerInput.value;\n    }\n\n    get inputElement(): any {\n        return this.timepickerInput && this.timepickerInput.element;\n    }\n\n    /***\n     * Register an input with this timepicker.\n     * input - The timepicker input to register with this timepicker\n     */\n    registerInput(input: TimepickerDirective): void {\n        if (this.timepickerInput) {\n            throw Error('A Timepicker can only be associated with a single input.');\n        }\n        this.timepickerInput = input;\n    }\n\n    open(): void {\n        this.domService.appendTimepickerToBody(NgxMaterialTimepickerContainerComponent, {\n            timepickerBaseRef: this,\n            time: this.time,\n            defaultTime: this.defaultTime,\n            maxTime: this.maxTime,\n            minTime: this.minTime,\n            format: this.format,\n            minutesGap: this.minutesGap,\n            disableAnimation: this.disableAnimation,\n            cancelBtnTmpl: this.cancelBtnTmpl,\n            confirmBtnTmpl: this.confirmBtnTmpl,\n            editableHintTmpl: this.editableHintTmpl,\n            disabled: this.disabled,\n            enableKeyboardInput: this.enableKeyboardInput,\n            preventOverlayClick: this.preventOverlayClick,\n            appendToInput: this.appendToInput,\n            hoursOnly: this.hoursOnly,\n            theme: this.theme || this._ngxMaterialTimepickerTheme,\n            timepickerClass: this.timepickerClass,\n            inputElement: this.inputElement\n        });\n        this.opened.next();\n        this.subscribeToEvents();\n    }\n\n    close(): void {\n        this.domService.destroyTimepicker();\n        this.closed.next();\n        this.unsubscribeFromEvents();\n    }\n\n    updateTime(time: string): void {\n        this.timeUpdated.next(time);\n    }\n\n    private subscribeToEvents(): void {\n        merge(this.eventService.backdropClick,\n            this.eventService.keydownEvent.pipe(filter(e => e.keyCode === ESCAPE && this.isEsc)))\n            .pipe(takeUntil(this.unsubscribe))\n            .subscribe(() => this.close());\n    }\n\n    private unsubscribeFromEvents(): void {\n        this.unsubscribe.next();\n        this.unsubscribe.complete();\n    }\n}\n","import {Directive} from '@angular/core';\n\n/* To override a default toggle icon */\n@Directive({selector: '[ngxMaterialTimepickerToggleIcon]'})\n\nexport class NgxMaterialTimepickerToggleIconDirective {\n}\n","import {Component, ContentChild, Input} from '@angular/core';\nimport {NgxMaterialTimepickerToggleIconDirective} from '../../directives/ngx-material-timepicker-toggle-icon.directive';\nimport {NgxMaterialTimepickerComponent} from '../../ngx-material-timepicker.component';\n\n@Component({\n    selector: 'ngx-material-timepicker-toggle',\n    templateUrl: 'ngx-material-timepicker-toggle.component.html',\n    styleUrls: ['ngx-material-timepicker-toggle.component.scss']\n})\n\nexport class NgxMaterialTimepickerToggleComponent {\n\n    @Input('for') timepicker: NgxMaterialTimepickerComponent;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    private _disabled: boolean;\n\n    @ContentChild(NgxMaterialTimepickerToggleIconDirective, {static: true}) customIcon: NgxMaterialTimepickerToggleIconDirective;\n\n    open(event): void {\n        if (this.timepicker) {\n            this.timepicker.open();\n            event.stopPropagation();\n        }\n    }\n}\n","import { Directive, ElementRef, forwardRef, HostListener, Inject, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { NgxMaterialTimepickerComponent } from '../ngx-material-timepicker.component';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { TimeAdapter } from '../services/time-adapter';\nimport { DateTime } from 'luxon';\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\n\nconst VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    // tslint:disable-next-line\n    useExisting: forwardRef(() => TimepickerDirective),\n    multi: true\n};\n\n@Directive({\n    selector: '[ngxTimepicker]',\n    providers: [VALUE_ACCESSOR],\n    host: {\n        '[disabled]': 'disabled',\n        '(change)': 'updateValue($event.target.value)',\n        '(blur)': 'onTouched()',\n    },\n})\nexport class TimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n        const isDynamicallyChanged = value && (this.previousFormat && this.previousFormat !== this._format);\n\n        if (isDynamicallyChanged) {\n            this.value = this._value;\n            this._timepicker.updateTime(this._value);\n        }\n        this.previousFormat = this._format;\n    }\n\n    get format(): number {\n        return this._format;\n    }\n\n    private _format = 12;\n\n    @Input()\n    set min(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._min = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\n            return;\n        }\n        this._min = value;\n    }\n\n    get min(): string | DateTime {\n        return this._min;\n    }\n\n    private _min: string | DateTime;\n\n    @Input()\n    set max(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._max = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\n            return;\n        }\n        this._max = value;\n    }\n\n    get max(): string | DateTime {\n        return this._max;\n    }\n\n    private _max: string | DateTime;\n\n    @Input('ngxTimepicker')\n    set timepicker(picker: NgxMaterialTimepickerComponent) {\n        this.registerTimepicker(picker);\n    }\n\n    private _timepicker: NgxMaterialTimepickerComponent;\n\n    @Input()\n    set value(value: string) {\n        if (!value) {\n            this._value = '';\n            this.updateInputValue();\n            return;\n        }\n        const time = TimeAdapter.formatTime(value, {locale: this.locale, format: this.format});\n        const isAvailable = TimeAdapter.isTimeAvailable(\n            time,\n            <DateTime>this._min,\n            <DateTime>this._max,\n            'minutes',\n            this._timepicker.minutesGap,\n            this._format\n        );\n\n        if (isAvailable) {\n            this._value = time;\n            this.updateInputValue();\n            return;\n        }\n        console.warn('Selected time doesn\\'t match min or max value');\n    }\n\n    get value(): string {\n        if (!this._value) {\n            return '';\n        }\n        return TimeAdapter.toLocaleTimeString(this._value, {format: this.format, locale: this.locale});\n    }\n\n    private _value = '';\n\n    @Input() disabled: boolean;\n    @Input() disableClick: boolean;\n\n    private timepickerSubscriptions: Subscription[] = [];\n    private previousFormat: number;\n\n    onTouched = () => {\n    }\n\n    private onChange: (value: any) => void = () => {\n    }\n\n    constructor(private elementRef: ElementRef,\n                @Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    get element(): any {\n        return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    private set defaultTime(time: string) {\n        this._timepicker.defaultTime = TimeAdapter.formatTime(time, {locale: this.locale, format: this.format});\n    }\n\n    updateValue(value: string) {\n        this.value = value;\n        this.onChange(value);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['value'] && changes['value'].currentValue) {\n            this.defaultTime = changes['value'].currentValue;\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event) {\n        if (!this.disableClick) {\n            this._timepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    writeValue(value: string): void {\n        this.value = value;\n        if (value) {\n            this.defaultTime = value;\n        }\n    }\n\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    ngOnDestroy() {\n        this.timepickerSubscriptions.forEach(s => s.unsubscribe());\n    }\n\n    private registerTimepicker(picker: NgxMaterialTimepickerComponent): void {\n        if (picker) {\n            this._timepicker = picker;\n            this._timepicker.registerInput(this);\n            this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe((time: string) => {\n                this.value = time;\n                this.onChange(this.value);\n                this.onTouched();\n            }));\n            this.timepickerSubscriptions.push(\n                this._timepicker.closed.subscribe(() => this.defaultTime = this._value));\n        } else {\n            throw new Error('NgxMaterialTimepickerComponent is not defined.' +\n                ' Please make sure you passed the timepicker to ngxTimepicker directive');\n        }\n    }\n\n    private updateInputValue(): void {\n        this.elementRef.nativeElement.value = this.value;\n    }\n\n}\n\n","import {AfterViewInit, Directive, ElementRef, Input} from '@angular/core';\nimport {NgxMaterialTimepickerTheme} from '../models/ngx-material-timepicker-theme.interface';\n\n@Directive({selector: '[ngxMaterialTimepickerTheme]'})\nexport class NgxMaterialTimepickerThemeDirective implements AfterViewInit {\n\n    @Input('ngxMaterialTimepickerTheme') theme: NgxMaterialTimepickerTheme;\n\n    private element: HTMLElement;\n\n    constructor(elementRef: ElementRef) {\n        this.element = elementRef.nativeElement;\n    }\n\n    ngAfterViewInit() {\n        if (this.theme) {\n            this.setTheme(this.theme);\n        }\n    }\n\n    private setTheme(theme): void {\n        for (const val in theme) {\n            if (theme.hasOwnProperty(val)) {\n                if (typeof theme[val] === 'string') {\n                    for (const prop in theme) {\n                        if (theme.hasOwnProperty(prop)) {\n                            this.element.style.setProperty(`--${camelCaseToDash(prop)}`, theme[prop]);\n                        }\n                    }\n                    return;\n                }\n                this.setTheme(theme[val]);\n            }\n\n        }\n    }\n}\n\nfunction camelCaseToDash(myStr) {\n    return myStr.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n","import { ClockFaceTime } from '../models/clock-face-time.interface';\nimport { TimeAdapter } from '../services/time-adapter';\nimport { TimeFormat } from '../models/time-format.enum';\nimport { DisabledTimeConfig } from '../models/disabled-time-config.interface';\nimport { DateTime } from 'luxon';\n\n\nexport function getHours(format: number): ClockFaceTime[] {\n    return Array(format).fill(1).map((v, i) => {\n        const angleStep = 30;\n        const time = v + i;\n        const angle = angleStep * time;\n        return {time: time === 24 ? 0 : time, angle};\n    });\n}\n\nexport function disableHours(hours: ClockFaceTime[], config: DisabledTimeConfig): ClockFaceTime[] {\n    if (config.min || config.max) {\n\n        return hours.map(value => {\n            const hour = config.format === 24 ? value.time : TimeAdapter.formatHour(value.time, config.format, config.period);\n            const currentTime = DateTime.fromObject({hour}).toFormat(TimeFormat.TWELVE);\n\n            return {\n                ...value,\n                disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'hours')\n            };\n        });\n    }\n    return hours;\n}\n\nexport function getMinutes(gap = 1): ClockFaceTime[] {\n    const minutesCount = 60;\n    const angleStep = 360 / minutesCount;\n    const minutes = [];\n\n    for (let i = 0; i < minutesCount; i++) {\n        const angle = angleStep * i;\n        if (i % gap === 0) {\n            minutes.push({time: i, angle: angle !== 0 ? angle : 360});\n        }\n    }\n    return minutes;\n}\n\nexport function disableMinutes(minutes: ClockFaceTime[], selectedHour: number, config: DisabledTimeConfig) {\n    if (config.min || config.max) {\n\n        const hour = TimeAdapter.formatHour(selectedHour, config.format, config.period);\n\n        return minutes.map(value => {\n            const currentTime = DateTime.fromObject({hour, minute: value.time}).toFormat(TimeFormat.TWELVE);\n\n            return {\n                ...value,\n                disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'minutes')\n            };\n        });\n    }\n    return minutes;\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\nimport { DateTime } from 'luxon';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { getHours } from '../../utils/timepicker-time.utils';\n\n\nexport class NgxMaterialTimepickerHoursFace {\n\n    @Input() selectedHour: ClockFaceTime;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() format: number;\n\n    @Output() hourChange = new EventEmitter<ClockFaceTime>();\n    @Output() hourSelected = new EventEmitter<number>();\n\n    hoursList: ClockFaceTime[] = [];\n\n    protected constructor(format: number) {\n        this.hoursList = getHours(format);\n    }\n\n    onTimeSelected(time: number): void {\n        this.hourSelected.next(time);\n    }\n}\n","import { AfterContentInit, ChangeDetectionStrategy, Component } from '@angular/core';\nimport { NgxMaterialTimepickerHoursFace } from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\nimport { disableHours } from '../../utils/timepicker-time.utils';\n\n@Component({\n    selector: 'ngx-material-timepicker-24-hours-face',\n    templateUrl: 'ngx-material-timepicker-24-hours-face.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NgxMaterialTimepicker24HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements AfterContentInit {\n\n    constructor() {\n        super(24);\n    }\n\n    ngAfterContentInit() {\n        this.hoursList = disableHours(this.hoursList, {\n            min: this.minTime,\n            max: this.maxTime,\n            format: this.format\n        });\n    }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { NgxMaterialTimepickerHoursFace } from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { disableHours } from '../../utils/timepicker-time.utils';\n\n\n@Component({\n    selector: 'ngx-material-timepicker-12-hours-face',\n    templateUrl: 'ngx-material-timepicker-12-hours-face.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NgxMaterialTimepicker12HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements OnChanges {\n\n    @Input() period: TimePeriod;\n\n    constructor() {\n        super(12);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue) {\n            this.hoursList = disableHours(this.hoursList, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { DateTime } from 'luxon';\nimport { disableMinutes, getMinutes } from '../../utils/timepicker-time.utils';\n\n\n@Component({\n    selector: 'ngx-material-timepicker-minutes-face',\n    templateUrl: './ngx-material-timepicker-minutes-face.component.html'\n})\nexport class NgxMaterialTimepickerMinutesFaceComponent implements OnChanges {\n\n    minutesList: ClockFaceTime[] = [];\n    timeUnit = TimeUnit;\n\n    @Input() selectedMinute: ClockFaceTime;\n    @Input() selectedHour: number;\n    @Input() period: TimePeriod;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() format: number;\n    @Input() minutesGap: number;\n\n    @Output() minuteChange = new EventEmitter<ClockFaceTime>();\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue) {\n            const minutes = getMinutes(this.minutesGap);\n            this.minutesList = disableMinutes(minutes, this.selectedHour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Output,\n    SimpleChanges,\n    ViewChild\n} from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimeUnit } from '../../models/time-unit.enum';\n\nconst CLOCK_HAND_STYLES = {\n    small: {\n        height: '75px',\n        top: 'calc(50% - 75px)'\n    },\n    large: {\n        height: '103px',\n        top: 'calc(50% - 103px)'\n    }\n};\n\n@Component({\n    selector: 'ngx-material-timepicker-face',\n    templateUrl: './ngx-material-timepicker-face.component.html',\n    styleUrls: ['./ngx-material-timepicker-face.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMaterialTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {\n\n    timeUnit = TimeUnit;\n\n    isClockFaceDisabled: boolean;\n    innerClockFaceSize = 85;\n\n    @Input() faceTime: ClockFaceTime[];\n    @Input() selectedTime: ClockFaceTime;\n    @Input() unit: TimeUnit;\n    @Input() format: number;\n    @Input() minutesGap: number;\n\n    @Output() timeChange = new EventEmitter<ClockFaceTime>();\n    @Output() timeSelected = new EventEmitter<number>();\n\n    @ViewChild('clockFace', {static: true}) clockFace: ElementRef;\n    @ViewChild('clockHand', {static: true}) clockHand: ElementRef;\n\n    private isStarted: boolean;\n    private touchStartHandler: () => any;\n    private touchEndHandler: () => any;\n\n    ngAfterViewInit() {\n        this.setClockHandPosition();\n        this.addTouchEvents();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const faceTimeChanges = changes['faceTime'];\n        const selectedTimeChanges = changes['selectedTime'];\n\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\n            /* Set time according to passed an input value */\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\n        }\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\n            this.setClockHandPosition();\n        }\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\n            setTimeout(() => this.selectAvailableTime());\n        }\n    }\n\n\n    trackByTime(_, time: ClockFaceTime): string | number {\n        return time.time;\n    }\n\n    @HostListener('mousedown', ['$event'])\n    onMousedown(e: any) {\n        e.preventDefault();\n        this.isStarted = true;\n    }\n\n    @HostListener('click', ['$event'])\n    @HostListener('touchmove', ['$event.changedTouches[0]'])\n    @HostListener('touchend', ['$event.changedTouches[0]'])\n    @HostListener('mousemove', ['$event'])\n    selectTime(e: any): void {\n\n        if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {\n            return;\n        }\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\n\n        /* Get x0 and y0 of the circle */\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\n        /* Counting the arctangent and convert it to from radian to deg */\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\n        /* Get angle according to quadrant */\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\n        /* Check if selected time from the inner clock face (24 hours format only) */\n        const isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\n        /* Round angle according to angle step */\n        const angleStep = this.unit === TimeUnit.MINUTE ? (6 * (this.minutesGap || 1)) : 30;\n        const roundedAngle = roundAngle(circleAngle, angleStep);\n        const angle = (roundedAngle || 360) + (isInnerClockChosen ? 360 : 0);\n\n        const selectedTime = this.faceTime.find(val => val.angle === angle);\n\n        if (selectedTime && !selectedTime.disabled) {\n            this.timeChange.next(selectedTime);\n\n            /* To let know whether user ended interaction with clock face */\n            if (!this.isStarted) {\n                this.timeSelected.next(selectedTime.time);\n            }\n        }\n\n    }\n\n    @HostListener('mouseup', ['$event'])\n    onMouseup(e: any) {\n        e.preventDefault();\n        this.isStarted = false;\n    }\n\n    ngOnDestroy() {\n        this.removeTouchEvents();\n    }\n\n    private addTouchEvents(): void {\n        this.touchStartHandler = this.onMousedown.bind(this);\n        this.touchEndHandler = this.onMouseup.bind(this);\n\n        this.clockFace.nativeElement.addEventListener('touchstart', this.touchStartHandler);\n        this.clockFace.nativeElement.addEventListener('touchend', this.touchEndHandler);\n    }\n\n    private removeTouchEvents(): void {\n        this.clockFace.nativeElement.removeEventListener('touchstart', this.touchStartHandler);\n        this.clockFace.nativeElement.removeEventListener('touchend', this.touchEndHandler);\n    }\n\n    private setClockHandPosition(): void {\n        if (this.format === 24) {\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\n                this.decreaseClockHand();\n            } else {\n                this.increaseClockHand();\n            }\n        }\n\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\n    }\n\n    private selectAvailableTime(): void {\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\n\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\n            const availableTime = this.faceTime.find(time => !time.disabled);\n\n            this.timeChange.next(availableTime);\n        }\n    }\n\n    private isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\n        /* Detect whether time from the inner clock face or not (24 format only) */\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\n    }\n\n    private decreaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\n    }\n\n    private increaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\n    }\n}\n\nfunction roundAngle(angle: number, step: number): number {\n    return Math.round(angle / step) * step;\n}\n\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\n    if (y > y0 && x >= x0) {// II quarter\n        return 180 - currentAngle;\n    } else if (y > y0 && x < x0) {// III quarter\n        return 180 + currentAngle;\n    } else if (y < y0 && x < x0) {// IV quarter\n        return 360 - currentAngle;\n    } else {// I quarter\n        return currentAngle;\n    }\n}\n","import {Component} from '@angular/core';\n\n@Component({\n    selector: 'ngx-material-timepicker-button',\n    templateUrl: './ngx-material-timepicker-button.component.html',\n    styleUrls: ['./ngx-material-timepicker-button.component.scss']\n})\nexport class NgxMaterialTimepickerButtonComponent {\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges,\n    TemplateRef\n} from '@angular/core';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { DateTime, Info } from 'luxon';\nimport { disableHours, disableMinutes, getHours, getMinutes } from '../../utils/timepicker-time.utils';\nimport { TIME_LOCALE } from '../../tokens/time-locale.token';\n\n@Component({\n    selector: 'ngx-material-timepicker-dial',\n    templateUrl: 'ngx-material-timepicker-dial.component.html',\n    styleUrls: ['ngx-material-timepicker-dial.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMaterialTimepickerDialComponent implements OnChanges {\n\n    timeUnit = TimeUnit;\n\n    hours: ClockFaceTime[];\n    minutes: ClockFaceTime[];\n    meridiems = Info.meridiems({locale: this.locale});\n\n    isHintVisible: boolean;\n\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() hour: number | string;\n    @Input() minute: number | string;\n    @Input() format: number;\n    @Input() period: TimePeriod;\n    @Input() activeTimeUnit: TimeUnit;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() isEditable: boolean;\n    @Input() minutesGap: number;\n    @Input() hoursOnly: boolean;\n\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\n    @Output() hourChanged = new EventEmitter<ClockFaceTime>();\n    @Output() minuteChanged = new EventEmitter<ClockFaceTime>();\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue\n            || changes['format'] && changes['format'].currentValue) {\n            const hours = getHours(this.format);\n\n            this.hours = disableHours(hours, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n        if (changes['period'] && changes['period'].currentValue\n            || changes['hour'] && changes['hour'].currentValue) {\n            const minutes = getMinutes(this.minutesGap);\n\n            this.minutes = disableMinutes(minutes, +this.hour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n\n    changeTimeUnit(unit: TimeUnit): void {\n        this.timeUnitChanged.next(unit);\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.periodChanged.next(period);\n    }\n\n    changeHour(hour: ClockFaceTime): void {\n        this.hourChanged.next(hour);\n    }\n\n    changeMinute(minute: ClockFaceTime): void {\n        this.minuteChanged.next(minute);\n    }\n\n    showHint(): void {\n        this.isHintVisible = true;\n    }\n\n    hideHint(): void {\n        this.isHintVisible = false;\n    }\n}\n","import { Inject, Injectable, Pipe, PipeTransform } from '@angular/core';\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\nimport { TimeUnit } from '../models/time-unit.enum';\nimport { DateTime, NumberingSystem } from 'luxon';\n\ntype TimeMeasure = 'hour' | 'minute';\n\n@Pipe({\n    name: 'timeParser'\n})\n@Injectable()\nexport class TimeParserPipe implements PipeTransform {\n\n    private readonly numberingSystem: NumberingSystem;\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n        this.numberingSystem = DateTime.local().setLocale(this.locale).resolvedLocaleOpts().numberingSystem as NumberingSystem;\n    }\n\n    transform(time: string | number, timeUnit = TimeUnit.HOUR): number | string {\n        if (time == null || time === '') {\n            return '';\n        }\n\n        if (!isNaN(+time)) {\n            return time;\n        }\n\n        if (timeUnit === TimeUnit.MINUTE) {\n            return this.parseTime(time, 'm', 'minute');\n        }\n\n        return this.parseTime(time, 'H', 'hour');\n\n    }\n\n    private parseTime(time: string | number, format: string, timeMeasure: TimeMeasure): number {\n        const parsedTime = DateTime.fromFormat(String(time), format, {numberingSystem: this.numberingSystem})[timeMeasure];\n\n        if (!isNaN(parsedTime)) {\n            return parsedTime;\n        }\n\n        throw new Error(`Cannot parse time - ${time}`);\n    }\n\n}\n","/* tslint:disable:triple-equals */\nimport {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\nimport {TimeUnit} from '../../models/time-unit.enum';\nimport {isDigit} from '../../utils/timepicker.utils';\nimport {TimeParserPipe} from '../../pipes/time-parser.pipe';\n\n@Component({\n    selector: 'ngx-material-timepicker-dial-control',\n    templateUrl: 'ngx-material-timepicker-dial-control.component.html',\n    styleUrls: ['ngx-material-timepicker-dial-control.component.scss'],\n    providers: [TimeParserPipe]\n})\nexport class NgxMaterialTimepickerDialControlComponent {\n\n    previousTime: number | string;\n\n    @Input() timeList: ClockFaceTime[];\n    @Input() timeUnit: TimeUnit;\n    @Input() time: string;\n    @Input() isActive: boolean;\n    @Input() isEditable: boolean;\n    @Input() minutesGap: number;\n    @Input() disabled: boolean;\n\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\n    @Output() timeChanged = new EventEmitter<ClockFaceTime>();\n    @Output() focused = new EventEmitter<null>();\n    @Output() unfocused = new EventEmitter<null>();\n\n    constructor(private timeParserPipe: TimeParserPipe) {\n    }\n\n    private get selectedTime(): ClockFaceTime {\n        if (!!this.time) {\n            return this.timeList.find(t => t.time === +this.time);\n        }\n    }\n\n    saveTimeAndChangeTimeUnit(event: FocusEvent, unit: TimeUnit): void {\n        event.preventDefault();\n        this.previousTime = this.time;\n        this.timeUnitChanged.next(unit);\n        this.focused.next();\n    }\n\n    updateTime(): void {\n        const time = this.selectedTime;\n        if (time) {\n            this.timeChanged.next(time);\n            this.previousTime = time.time;\n        }\n    }\n\n    changeTimeByKeyboard(e: any): void {\n        const char = String.fromCharCode(e.keyCode);\n\n        if ((!isDigit(e)) || isTimeDisabledToChange(this.time, char, this.timeList)) {\n            e.preventDefault();\n        }\n\n        if (isDigit(e)) {\n            this.changeTimeByArrow(e.keyCode);\n        }\n    }\n\n    onModelChange(value: string): void {\n        this.time = this.timeParserPipe.transform(value, this.timeUnit).toString();\n    }\n\n    private changeTimeByArrow(keyCode: number): void {\n        const ARROW_UP = 38;\n        const ARROW_DOWN = 40;\n        let time: string;\n\n        if (keyCode === ARROW_UP) {\n            time = String(+this.time + (this.minutesGap || 1));\n        } else if (keyCode === ARROW_DOWN) {\n            time = String(+this.time - (this.minutesGap || 1));\n        }\n\n        if (!isTimeUnavailable(time, this.timeList)) {\n            this.time = time;\n            this.updateTime();\n        }\n    }\n\n}\n\nfunction isTimeDisabledToChange(currentTime: string, nextTime: string, timeList: ClockFaceTime[]): boolean {\n    const isNumber = /\\d/.test(nextTime);\n\n    if (isNumber) {\n        const time = currentTime + nextTime;\n        return isTimeUnavailable(time, timeList);\n    }\n}\n\nfunction isTimeUnavailable(time: string, timeList: ClockFaceTime[]): boolean {\n    const selectedTime = timeList.find(value => value.time === +time);\n    return !selectedTime || (selectedTime && selectedTime.disabled);\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { animate, sequence, style, transition, trigger } from '@angular/animations';\nimport { DateTime } from 'luxon';\nimport { disableHours, disableMinutes } from '../../utils/timepicker-time.utils';\n\n@Component({\n    selector: 'ngx-material-timepicker-period',\n    templateUrl: 'ngx-material-timepicker-period.component.html',\n    styleUrls: ['ngx-material-timepicker-period.component.scss'],\n    animations: [\n        trigger('scaleInOut', [\n            transition(':enter', [\n                style({transform: 'scale(0)'}),\n                animate('.2s', style({transform: 'scale(1)'})),\n                sequence([\n                    animate('3s', style({opacity: 1})),\n                    animate('.3s', style({opacity: 0}))\n                ])\n            ])\n        ])\n    ]\n})\nexport class NgxMaterialTimepickerPeriodComponent {\n\n    timePeriod = TimePeriod;\n    isPeriodAvailable = true;\n\n    @Input() selectedPeriod: TimePeriod;\n    @Input() format: number;\n    @Input() activeTimeUnit: TimeUnit;\n    @Input() hours: ClockFaceTime[];\n    @Input() minutes: ClockFaceTime[];\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() selectedHour: number | string;\n    @Input() meridiems: string[];\n\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\n\n    changePeriod(period: TimePeriod): void {\n        this.isPeriodAvailable = this.isSwitchPeriodAvailable(period);\n        if (this.isPeriodAvailable) {\n            this.periodChanged.next(period);\n        }\n    }\n\n    animationDone(): void {\n        this.isPeriodAvailable = true;\n    }\n\n    private isSwitchPeriodAvailable(period: TimePeriod): boolean {\n        const time = this.getDisabledTimeByPeriod(period);\n        return !time.every(t => t.disabled);\n    }\n\n    private getDisabledTimeByPeriod(period: TimePeriod): ClockFaceTime[] {\n        switch (this.activeTimeUnit) {\n            case TimeUnit.HOUR:\n                return disableHours(this.hours, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            case TimeUnit.MINUTE:\n                return disableMinutes(this.minutes, +this.selectedHour, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            default:\n                throw new Error('no such TimeUnit');\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { TimeUnit } from '../models/time-unit.enum';\nimport { DateTime } from 'luxon';\n\n@Pipe({\n    name: 'timeFormatter'\n})\nexport class TimeFormatterPipe implements PipeTransform {\n\n    transform(time: number | string, timeUnit: TimeUnit): any {\n        if (time == null || time === '') {\n            return time;\n        }\n        switch (timeUnit) {\n            case TimeUnit.HOUR:\n                return DateTime.fromObject({hour: +time}).toFormat('HH');\n            case TimeUnit.MINUTE:\n                return DateTime.fromObject({minute: +time}).toFormat('mm');\n            default:\n                throw new Error('no such time unit');\n        }\n    }\n\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport {NgxMaterialTimepickerEventService} from '../services/ngx-material-timepicker-event.service';\n\n@Directive({\n    selector: '[overlay]'\n})\nexport class OverlayDirective {\n\n    @Input('overlay') preventClick: boolean;\n\n    constructor(private eventService: NgxMaterialTimepickerEventService) {\n    }\n\n\n    @HostListener('click', ['$event'])\n    onClick(e: any) {\n        if (!this.preventClick) {\n            this.eventService.dispatchEvent(e);\n        }\n        e.preventDefault();\n    }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n    name: 'minutesFormatter'\n})\nexport class MinutesFormatterPipe implements PipeTransform {\n\n    transform(minute: number, gap = 5): number | string {\n        if (!minute) {\n            return minute;\n        }\n\n        return minute % gap === 0 ? minute : '';\n    }\n\n}\n","import {Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\n@Directive({\n    selector: '[timepickerAutofocus]'\n})\nexport class AutofocusDirective implements OnChanges, OnDestroy {\n\n    @Input('timepickerAutofocus') isFocusActive: boolean;\n\n    private activeElement: HTMLElement;\n\n    constructor(private element: ElementRef, @Optional() @Inject(DOCUMENT) private document: any) {\n        this.activeElement = this.document.activeElement;\n    }\n\n    ngOnChanges() {\n        if (this.isFocusActive) {\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n            setTimeout(() => this.element.nativeElement.focus({ preventScroll: true }));\n        }\n    }\n\n    ngOnDestroy() {\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n        setTimeout(() => this.activeElement.focus({ preventScroll: true }));\n    }\n}\n","import { Component, EventEmitter, Inject, Input, OnDestroy, OnInit, Output, TemplateRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { NgxMaterialTimepickerService } from '../../services/ngx-material-timepicker.service';\nimport { Observable, Subject } from 'rxjs';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { getHours, getMinutes } from '../../utils/timepicker-time.utils';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { NgxMaterialTimepickerTheme } from '../../models/ngx-material-timepicker-theme.interface';\nimport { TimeAdapter } from '../../services/time-adapter';\nimport { TIME_LOCALE } from '../../tokens/time-locale.token';\n\n@Component({\n    selector: 'ngx-timepicker-field',\n    templateUrl: './ngx-timepicker-field.component.html',\n    styleUrls: ['./ngx-timepicker-field.component.scss'],\n    providers: [\n        NgxMaterialTimepickerService,\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: NgxTimepickerFieldComponent,\n            multi: true\n        }\n    ]\n})\nexport class NgxTimepickerFieldComponent implements OnInit, OnDestroy, ControlValueAccessor {\n\n    period$: Observable<TimePeriod>;\n    hour$: Observable<ClockFaceTime>;\n    minute$: Observable<ClockFaceTime>;\n\n    minHour = 1;\n    maxHour = 12;\n\n    timeUnit = TimeUnit;\n    timepickerTime: string;\n    isDefaultTime: boolean;\n\n    @Input() disabled: boolean;\n    @Input() toggleIcon: TemplateRef<HTMLObjectElement>;\n    @Input() buttonAlign: 'right' | 'left' = 'right';\n    @Input() clockTheme: NgxMaterialTimepickerTheme;\n    @Input() controlOnly: boolean;\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n        this.minHour = this._format === 12 ? 1 : 0;\n        this.maxHour = this._format === 12 ? 12 : 23;\n        this.hoursList = getHours(this._format);\n        const isDynamicallyChanged = value && (this.previousFormat && this.previousFormat !== this._format);\n\n        if (isDynamicallyChanged) {\n            this.defaultTime = this.timepickerTime;\n        }\n        this.previousFormat = this._format;\n    }\n\n    get format(): number {\n        return this._format;\n    }\n\n\n    @Input()\n    set defaultTime(val: string) {\n        const time = TimeAdapter.formatTime(val, {locale: this.locale, format: this._format});\n        this.timepickerService.setDefaultTimeIfAvailable(time, null, null, this._format);\n        this._defaultTime = time;\n        this.timepickerTime = time;\n        this.isDefaultTime = !!time;\n    }\n\n    get defaultTime(): string {\n        return this._defaultTime;\n    }\n\n    @Output() timeChanged = new EventEmitter<string>();\n\n    private _defaultTime: string;\n    private _format = 12;\n    private previousFormat: number;\n\n    private hoursList: ClockFaceTime[];\n    private minutesList: ClockFaceTime[];\n\n    private unsubscribe$ = new Subject();\n\n    private onChange: (value: string) => void = () => {\n    }\n\n    constructor(private timepickerService: NgxMaterialTimepickerService,\n                @Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    ngOnInit() {\n        this.period$ = this.timepickerService.selectedPeriod;\n        this.hour$ = this.timepickerService.selectedHour;\n        this.minute$ = this.timepickerService.selectedMinute;\n\n        this.hoursList = getHours(this._format);\n        this.minutesList = getMinutes();\n    }\n\n    writeValue(val: string): void {\n        if (val) {\n            this.defaultTime = val;\n        } else {\n            this.resetTime();\n        }\n    }\n\n    registerOnTouched(fn: any): void {\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    changeHour(hour: number): void {\n        this.timepickerService.hour = this.hoursList.find(h => h.time === hour);\n        this.changeTime();\n    }\n\n    changeMinute(minute: number): void {\n        this.timepickerService.minute = this.minutesList.find(m => m.time === minute);\n        this.changeTime();\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.timepickerService.period = period;\n        this.changeTime();\n    }\n\n    onTimeSet(time: string): void {\n        this.defaultTime = time;\n        this.emitLocalTimeChange(time);\n    }\n\n    ngOnDestroy(): void {\n        this.unsubscribe$.next();\n        this.unsubscribe$.complete();\n    }\n\n    private changeTime(): void {\n        const time = this.timepickerService.getFullTime(this._format);\n        this.timepickerTime = time;\n\n        this.emitLocalTimeChange(time);\n    }\n\n    private resetTime(): void {\n        this.timepickerService.hour = {angle: 0, time: null};\n        this.timepickerService.minute = {angle: 0, time: null};\n    }\n\n    private emitLocalTimeChange(time: string): void {\n        const localTime = TimeAdapter.toLocaleTimeString(time, {format: this.format, locale: this.locale});\n\n        this.onChange(localTime);\n        this.timeChanged.emit(localTime);\n    }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { isDigit } from '../../../utils/timepicker.utils';\nimport { TimeUnit } from '../../../models/time-unit.enum';\nimport { TimeParserPipe } from '../../../pipes/time-parser.pipe';\n\n@Component({\n    selector: 'ngx-timepicker-time-control',\n    templateUrl: './ngx-timepicker-time-control.component.html',\n    styleUrls: ['./ngx-timepicker-time-control.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [TimeParserPipe]\n})\n\nexport class NgxTimepickerTimeControlComponent implements OnChanges {\n\n    @Input() time: number;\n    @Input() min: number;\n    @Input() max: number;\n    @Input() placeholder: string;\n    @Input() timeUnit: TimeUnit;\n    @Input() disabled: boolean;\n    @Input() isDefaultTimeSet: boolean;\n\n    @Output() timeChanged = new EventEmitter<number>();\n\n    isFocused: boolean;\n\n    private previousTime: number;\n\n    constructor(private timeParser: TimeParserPipe) {\n    }\n\n\n    ngOnChanges(changes: SimpleChanges): void {\n        const timeChanges = changes['time'];\n        const isTimeNotProvided = timeChanges && timeChanges.isFirstChange() && !this.isDefaultTimeSet;\n\n        if (isTimeNotProvided) {\n            this.time = null;\n        }\n    }\n\n    changeTime(event: any): void {\n        if (!isDigit(event)) {\n            event.preventDefault();\n        }\n        const char = String.fromCharCode(event.keyCode);\n        const time = concatTime(String(this.time), char);\n\n        this.changeTimeIfValid(time);\n\n        switch (event.key) {\n            case 'ArrowUp':\n                this.increase();\n                break;\n            case 'ArrowDown':\n                this.decrease();\n                break;\n        }\n    }\n\n    increase(): void {\n        if (!this.disabled) {\n            let nextTime = +this.time + 1;\n\n            if (nextTime > this.max) {\n                nextTime = this.min;\n            }\n\n            this.timeChanged.emit(nextTime);\n        }\n    }\n\n    decrease(): void {\n        if (!this.disabled) {\n            let previousTime = +this.time - 1;\n\n            if (previousTime < this.min) {\n                previousTime = this.max;\n            }\n\n            this.timeChanged.emit(previousTime);\n        }\n    }\n\n    onFocus(): void {\n        this.isFocused = true;\n        this.previousTime = this.time;\n    }\n\n    onBlur(): void {\n        this.isFocused = false;\n\n        if (this.previousTime !== this.time) {\n            this.changeTimeIfValid(+this.time);\n        }\n    }\n\n    onModelChange(value: string): void {\n        this.time = +this.timeParser.transform(value, this.timeUnit);\n    }\n\n    private changeTimeIfValid(value: number | undefined) {\n        if (!isNaN(value)) {\n            this.time = value;\n\n            if (this.time > this.max) {\n                const timeString = String(value);\n                this.time = +timeString[timeString.length - 1];\n            }\n\n            if (this.time < this.min) {\n                this.time = this.min;\n            }\n\n            this.timeChanged.emit(this.time);\n        }\n    }\n}\n\nfunction concatTime(currentTime: string, nextTime: string): number {\n    const isNumber = /\\d/.test(nextTime);\n\n    if (isNumber) {\n        const time = currentTime + nextTime;\n        return +time;\n    }\n}\n\n","import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { TimePeriod } from '../../../models/time-period.enum';\nimport { animate, style, transition, trigger } from '@angular/animations';\nimport { TIME_LOCALE } from '../../../tokens/time-locale.token';\nimport { Info } from 'luxon';\n\n@Component({\n    selector: 'ngx-timepicker-period-selector',\n    templateUrl: 'ngx-timepicker-period-selector.component.html',\n    styleUrls: ['./ngx-timepicker-period-selector.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [\n        trigger('scaleInOut', [\n            transition(':enter', [\n                style({transform: 'scale(0)', opacity: 0}),\n                animate(200, style({transform: 'scale(1)', opacity: 1}))\n            ]),\n            transition(':leave', [\n                animate(200, style({transform: 'scale(0)', opacity: 0}))\n            ])\n        ])\n    ]\n})\n\nexport class NgxTimepickerPeriodSelectorComponent {\n\n    @Input() isOpened: boolean;\n    @Input() disabled: boolean;\n    @Input()\n    set selectedPeriod(period: TimePeriod) {\n        if (period) {\n            const periods = [TimePeriod.AM, TimePeriod.PM];\n            this.localizedPeriod = this.meridiems[periods.indexOf(period)];\n        }\n    }\n\n    @Output() periodSelected = new EventEmitter<TimePeriod>();\n\n    period = TimePeriod;\n    meridiems = Info.meridiems({locale: this.locale});\n    localizedPeriod: string;\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    open(): void {\n        if (!this.disabled) {\n            this.isOpened = true;\n        }\n    }\n\n    select(period: TimePeriod): void {\n        this.periodSelected.next(period);\n        this.isOpened = false;\n    }\n\n    backdropClick(): void {\n        this.isOpened = false;\n    }\n}\n","import { Inject, Pipe, PipeTransform } from '@angular/core';\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\nimport { TimeUnit } from '../models/time-unit.enum';\nimport { DateTime } from 'luxon';\n\ntype TimeMeasure = 'hour' | 'minute';\n\n@Pipe({\n    name: 'timeLocalizer'\n})\nexport class TimeLocalizerPipe implements PipeTransform {\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    transform(time: number | string, timeUnit: TimeUnit, isKeyboardEnabled = false): string {\n        if (time == null || time === '') {\n            return '';\n        }\n\n        switch (timeUnit) {\n            case TimeUnit.HOUR: {\n                const format = (time === 0 || isKeyboardEnabled) ? 'HH' : 'H';\n                return this.formatTime('hour', time, format);\n            }\n            case TimeUnit.MINUTE:\n                return this.formatTime('minute', time, 'mm');\n            default:\n                throw new Error(`There is no Time Unit with type ${timeUnit}`);\n        }\n    }\n\n    private formatTime(timeMeasure: TimeMeasure, time: string | number, format: string): string {\n        try {\n            return DateTime.fromObject({[timeMeasure]: +time}).setLocale(this.locale).toFormat(format);\n        } catch {\n            throw new Error(`Cannot format provided time - ${time} to locale - ${this.locale}`);\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'activeHour'\n})\nexport class ActiveHourPipe implements PipeTransform {\n\n    transform(hour: number, currentHour: number, isClockFaceDisabled: boolean): boolean {\n        if (hour == null || isClockFaceDisabled) {\n            return false;\n        }\n\n        return hour === currentHour;\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'activeMinute'\n})\nexport class ActiveMinutePipe implements PipeTransform {\n\n    transform(minute: number, currentMinute: number, gap: number, isClockFaceDisabled: boolean): boolean {\n        if (minute == null || isClockFaceDisabled) {\n            return false;\n        }\n        const defaultGap = 5;\n\n        return ((currentMinute === minute) && (minute % (gap || defaultGap) === 0));\n    }\n\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'ngx-material-timepicker-content',\n    templateUrl: './ngx-material-timepicker-content.component.html',\n})\nexport class NgxMaterialTimepickerContentComponent {\n    @Input() appendToInput: boolean;\n    @Input() inputElement: any;\n}\n","import { AfterViewInit, Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';\n\ntype TimepickerDirection = 'top' | 'center' | 'bottom';\n\n@Directive({\n    selector: '[ngxAppendToInput]'\n})\nexport class AppendToInputDirective implements AfterViewInit {\n\n    @Input('ngxAppendToInput') inputElement: any;\n\n    private _direction: TimepickerDirection;\n    private _inputCords: ClientRect;\n    private readonly element: HTMLElement;\n\n    constructor(elementRef: ElementRef<HTMLElement>,\n                private renderer: Renderer2) {\n        this.element = elementRef.nativeElement;\n    }\n\n    private get inputCords(): ClientRect {\n        return this.inputElement.getBoundingClientRect();\n    }\n\n    private get direction(): TimepickerDirection {\n        const height = this.element.offsetHeight;\n        const {bottom, top} = this._inputCords;\n        const isElementFit = (window && window.innerHeight) - bottom < height;\n        const isTop = isElementFit && top > height;\n        const isCenter = isElementFit && top < height;\n\n        if (isTop) {\n            return 'top';\n        } else if (isCenter) {\n            return 'center';\n        }\n        return 'bottom';\n    }\n\n    ngAfterViewInit(): void {\n        this._inputCords = this.inputCords;\n        this._direction = this.direction;\n\n        this.append();\n    }\n\n    @HostListener('window:scroll')\n    changePosition(): void {\n        const {bottom, top} = this.inputCords;\n        const y = this.defineElementYByDirection(top, bottom);\n        this.setStyle('top', `${y}px`);\n    }\n\n    private append(): void {\n        const {left, bottom, top} = this._inputCords;\n        const y = this.defineElementYByDirection(top, bottom);\n\n        this.setStyle('position', 'fixed');\n        this.setStyle('left', `${left}px`);\n        this.setStyle('top', `${y}px`);\n    }\n\n    private setStyle(style: string, value: string): void {\n        this.renderer.setStyle(this.element, style, value);\n    }\n\n    private defineElementYByDirection(inputTop: number, inputBottom: number): number {\n        if (this._direction === 'top') {\n            return inputTop - this.element.offsetHeight;\n        } else if (this._direction === 'center') {\n            return inputTop - (this.element.offsetHeight / 2);\n        }\n        return inputBottom;\n    }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxMaterialTimepickerComponent } from './ngx-material-timepicker.component';\nimport { FormsModule } from '@angular/forms';\nimport { NgxMaterialTimepickerToggleComponent } from './components/timepicker-toggle-button/ngx-material-timepicker-toggle.component';\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\nimport { NgxMaterialTimepickerToggleIconDirective } from './directives/ngx-material-timepicker-toggle-icon.directive';\nimport { NgxMaterialTimepickerThemeDirective } from './directives/ngx-material-timepicker-theme.directive';\nimport {\n    NgxMaterialTimepicker24HoursFaceComponent\n} from './components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component';\nimport {\n    NgxMaterialTimepicker12HoursFaceComponent\n} from './components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component';\nimport {\n    NgxMaterialTimepickerMinutesFaceComponent } from './components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component';\nimport { NgxMaterialTimepickerFaceComponent } from './components/timepicker-face/ngx-material-timepicker-face.component';\nimport { NgxMaterialTimepickerButtonComponent } from './components/timepicker-button/ngx-material-timepicker-button.component';\nimport { NgxMaterialTimepickerDialComponent } from './components/timepicker-dial/ngx-material-timepicker-dial.component';\nimport {\n    NgxMaterialTimepickerDialControlComponent } from './components/timepicker-dial-control/ngx-material-timepicker-dial-control.component';\nimport { NgxMaterialTimepickerPeriodComponent } from './components/timepicker-period/ngx-material-timepicker-period.component';\nimport { TimeFormatterPipe } from './pipes/time-formatter.pipe';\nimport { OverlayDirective } from './directives/overlay.directive';\nimport { MinutesFormatterPipe } from './pipes/minutes-formatter.pipe';\nimport { AutofocusDirective } from './directives/autofocus.directive';\nimport { NgxTimepickerFieldComponent } from './components/timepicker-field/ngx-timepicker-field.component';\nimport {\n    NgxTimepickerTimeControlComponent\n} from './components/timepicker-field/timepicker-time-control/ngx-timepicker-time-control.component';\nimport {\n    NgxTimepickerPeriodSelectorComponent\n} from './components/timepicker-field/timepicker-period-selector/ngx-timepicker-period-selector.component';\nimport { TimeLocalizerPipe } from './pipes/time-localizer.pipe';\nimport { TIME_LOCALE } from './tokens/time-locale.token';\nimport { TimeAdapter } from './services/time-adapter';\nimport { TimeParserPipe } from './pipes/time-parser.pipe';\nimport { ActiveHourPipe } from './pipes/active-hour.pipe';\nimport { ActiveMinutePipe } from './pipes/active-minute.pipe';\nimport {\n    NgxMaterialTimepickerContainerComponent\n} from './components/ngx-material-timepicker-container/ngx-material-timepicker-container.component';\nimport {\n    NgxMaterialTimepickerContentComponent\n} from './components/ngx-material-timepicker-content/ngx-material-timepicker-content.component';\nimport { AppendToInputDirective } from './directives/append-to-input.directive';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [\n        NgxMaterialTimepickerComponent,\n        NgxMaterialTimepickerToggleComponent,\n        NgxTimepickerFieldComponent,\n        TimepickerDirective,\n        NgxMaterialTimepickerToggleIconDirective,\n        NgxMaterialTimepickerThemeDirective,\n        NgxMaterialTimepicker24HoursFaceComponent,\n        NgxMaterialTimepicker12HoursFaceComponent,\n        NgxMaterialTimepickerMinutesFaceComponent,\n        NgxMaterialTimepickerFaceComponent,\n        NgxMaterialTimepickerDialComponent,\n        NgxMaterialTimepickerDialControlComponent\n    ],\n    declarations: [\n        NgxMaterialTimepickerComponent,\n        NgxMaterialTimepicker24HoursFaceComponent,\n        NgxMaterialTimepicker12HoursFaceComponent,\n        NgxMaterialTimepickerMinutesFaceComponent,\n        NgxMaterialTimepickerFaceComponent,\n        NgxMaterialTimepickerToggleComponent,\n        NgxMaterialTimepickerButtonComponent,\n        NgxMaterialTimepickerDialComponent,\n        NgxMaterialTimepickerDialControlComponent,\n        NgxMaterialTimepickerPeriodComponent,\n        TimeFormatterPipe,\n        TimepickerDirective,\n        OverlayDirective,\n        NgxMaterialTimepickerToggleIconDirective,\n        AutofocusDirective,\n        MinutesFormatterPipe,\n        NgxMaterialTimepickerThemeDirective,\n        NgxTimepickerFieldComponent,\n        NgxTimepickerTimeControlComponent,\n        NgxTimepickerPeriodSelectorComponent,\n        TimeLocalizerPipe,\n        TimeParserPipe,\n        ActiveHourPipe,\n        ActiveMinutePipe,\n        NgxMaterialTimepickerContainerComponent,\n        NgxMaterialTimepickerContentComponent,\n        AppendToInputDirective\n    ],\n    providers: [\n        {provide: TIME_LOCALE, useValue: TimeAdapter.DEFAULT_LOCALE},\n    ],\n    entryComponents: [NgxMaterialTimepickerContainerComponent]\n})\nexport class NgxMaterialTimepickerModule {\n\n    static setLocale(locale: string): ModuleWithProviders {\n        return {\n            ngModule: NgxMaterialTimepickerModule,\n            providers: [\n                {provide: TIME_LOCALE, useValue: locale}\n            ]\n        };\n    }\n}\n"]}